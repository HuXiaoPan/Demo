#  Project: i-Navi
#  
#
# (c) Copyright 2013 - 2015
#
# All rights reserved.

# Check if use of protobuf from external/protobuf is allowed
if( SYSTEM_PROTOBUF )
   set(DISABLE_EXTERNAL_PROTOBUF ON)
endif()

if ( NOT DEFINED DISABLE_EXTERNAL_PROTOBUF )
   if( NOT DEFINED DISABLE_EXTERNAL_LIBS )
      set(DISABLE_EXTERNAL_PROTOBUF OFF)
   else()
      set(DISABLE_EXTERNAL_PROTOBUF ${DISABLE_EXTERNAL_LIBS})
   endif()
endif()

if (DISABLE_EXTERNAL_PROTOBUF)
   find_package(Protobuf REQUIRED)
   if (PROTOBUF_FOUND)
      # We may have a protobuf lib and headers but no working compiler
      execute_process(COMMAND          ${PROTOBUF_PROTOC_EXECUTABLE}
                      RESULT_VARIABLE  PROTOC_EXE_RUN
                      OUTPUT_QUIET ERROR_QUIET)
      if(NOT "${PROTOC_EXE_RUN}" STREQUAL "1")
         message (STATUS "host system protoc not working, falling back to using external/protobuf")
         add_subdirectory(external/protobuf)
      endif()
   endif()
else()
   message (STATUS "using external/protobuf")
   # By default have PROTOBUF_GENERATE_CPP macro pass -I to protoc
   # for each directory where a proto file is referenced.
   if(NOT DEFINED PROTOBUF_GENERATE_CPP_APPEND_PATH)
      set(PROTOBUF_GENERATE_CPP_APPEND_PATH TRUE)
   endif()
   add_subdirectory(external/protobuf)
endif()

message(STATUS "PROTOBUF: ${PROTOBUF_VERSION_STRING}")
message(STATUS " INC: ${PROTOBUF_INCLUDE_DIRS}")
message(STATUS " LIB: ${PROTOBUF_LIBRARIES}")
message(STATUS " EXE: ${PROTOBUF_PROTOC_EXECUTABLE}")

# Define a custom target depending on all files generated by protobuf
add_custom_target(generate_protobuf ALL COMMENT "Depends on all protobuf generated sources and headers")
set_target_properties(generate_protobuf
                      PROPERTIES FOLDER "Generated/protobuf")
# Define a global counter so add additional generate_protobuf_<cnt> target below
set_property(GLOBAL PROPERTY generate_protobuf_counter "1")

function(PROTOBUF_GENERATE_CPP SRCS HDRS)
   if(NOT ARGN)
      message(SEND_ERROR "Error: PROTOBUF_GENERATE_CPP() called without any proto files")
      return()
   endif()

   if(PROTOBUF_GENERATE_CPP_APPEND_PATH)
      # Create an include path for each file specified
      foreach(FIL ${ARGN})
         get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
         get_filename_component(ABS_PATH ${ABS_FIL} PATH)
      endforeach()
   endif()

   if(DEFINED PROTOBUF_IMPORT_DIRS)
      foreach(DIR ${PROTOBUF_IMPORT_DIRS})
         get_filename_component(ABS_PATH ${DIR} ABSOLUTE)
      endforeach()
   endif()

   set(${SRCS})
   set(${HDRS})
   set(PROTOCS "")
   foreach(FIL ${ARGN})
      get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
      get_filename_component(FIL_WE ${FIL} NAME_WE)
      get_filename_component(DIREC ${FIL} DIRECTORY)

      # check wether filename is already an absolute path which is not allowed
      get_filename_component(FULLPATH ${FIL} ABSOLUTE)

      if (${FIL} STREQUAL ${FULLPATH})
         message(FATAL_ERROR "file '${FIL}' must have a relative path")
      endif()

      set(GEN_SRC ${CMAKE_CURRENT_BINARY_DIR}/${DIREC}/${FIL_WE}.pb.cc)
      set(GEN_HDR ${CMAKE_CURRENT_BINARY_DIR}/${DIREC}/${FIL_WE}.pb.h)

      list(APPEND ${SRCS} "${GEN_SRC}")
      list(APPEND ${HDRS} "${GEN_HDR}")
      list(APPEND PROTOCS "${ABS_FIL}")

      add_custom_command(
         OUTPUT "${GEN_SRC}"
                "${GEN_HDR}"
         COMMAND  ${PROTOBUF_PROTOC_EXECUTABLE}
         ARGS --proto_path=${CMAKE_SOURCE_DIR} --cpp_out ${CMAKE_BINARY_DIR} ${ABS_FIL}
         DEPENDS ${ABS_FIL} ${PROTOBUF_PROTOC_EXECUTABLE}
         COMMENT "Running C++ protocol buffer compiler on ${FIL}"
         VERBATIM )
      if (CMAKE_COMPILER_IS_GNUCXX)
         # disable all warnings on generated code
         set_source_files_properties(${GEN_SRC} PROPERTIES COMPILE_FLAGS -w)
      endif()
   endforeach()

   # Create a unique target (generate_protobuf_<cnt>) for this run
   # and make it depend on the generated files
   get_property(generate_protobuf_index GLOBAL PROPERTY generate_protobuf_counter)
   add_custom_target(generate_protobuf_${generate_protobuf_index} ALL DEPENDS ${${SRCS}} ${${HDRS}})
   set_target_properties(generate_protobuf_${generate_protobuf_index}
                         PROPERTIES FOLDER "Generated/protobuf")
   # Make the global generate_protobuf target depend on our local unique target
   add_dependencies(generate_protobuf generate_protobuf_${generate_protobuf_index})
   # Advance the global counter
   MATH(EXPR generate_protobuf_index "${generate_protobuf_index}+1")
   set_property(GLOBAL PROPERTY generate_protobuf_counter "${generate_protobuf_index}")

   add_custom_command(
      OUTPUT "needfordependencyonly.txt"
      COMMAND  ${PROTOBUF_PROTOC_EXECUTABLE}
      DEPENDS
      protobuf
      protobuf_lite
      ${PROTOCS}
   )

   #set(${PROTOCS} ${PROTOCS} PARENT_SCOPE)
   set_source_files_properties(${${SRCS}} ${${HDRS}} PROPERTIES GENERATED TRUE)
   set(${SRCS} ${${SRCS}} PARENT_SCOPE)
   set(${HDRS} ${${HDRS}} PARENT_SCOPE)
endfunction()
